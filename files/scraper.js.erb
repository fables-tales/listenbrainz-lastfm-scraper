function makeURIObject(lastfmURI, spotifyURI) {

}

function select(selector, collection) {
    var newCollection = [];
    for (var i = 0; i < collection.length; i++) {
        if (selector(collection[i])) {
            newCollection.push(collection[i]);
        }
    }

    return newCollection;
}

function map(applicable, collection) {
    var newCollection = [];
    for (var i = 0; i < collection.length; i++) {
        newCollection.push(applicable(collection[i]));
    }

    return newCollection;
}

function each(applicable, collection) {
    for (var i = 0; i < collection.length; i++) {
        applicable(collection[i]);
    }
}

function isSpotifyURI(uri) {
    return !!(/open.spotify/.exec(uri));
}

var Scrobble = (function() {
    return function(rootScrobbleElement) {
        this.lastfmID = function() {
            var loveButtonForm = rootScrobbleElement.getElementsByTagName("form")[0];
            var loveButtonURL = loveButtonForm.getAttribute("action");
            return extractlastFMIDFromLoveButtonURL(loveButtonURL);
        }

        this.artistName = function() {
            var artistElement = rootScrobbleElement.getElementsByClassName("chartlist-artists")[0];
            var artistName = artistElement.getElementsByTagName("a")[0].innerHTML;
            return artistName;
        }

        this.trackName = function() {
            var trackElement = rootScrobbleElement.getElementsByClassName("link-block-target")[0];
            return trackElement.innerHTML;
        }

        this.scrobbledAt = function() {
            var dateContainer = rootScrobbleElement.getElementsByClassName("chartlist-timestamp")[0]
                var dateElement = dateContainer.getElementsByTagName("span")[0];
            var dateString = dateElement.getAttribute("title");
            //we have to do this because javascript's date parse method doesn't
            //directly accept lastfm's new date format but it does if we add the
            //space before am or pm
            var manipulatedDateString = dateString.replace("am", " am").replace("pm", " pm");
            return Math.round(Date.parse(manipulatedDateString)/1000);
        }

        this.optionalSpotifyID = function() {
            return select(
                    isSpotifyURI,
                    map(
                        function(elem) { return elem.getAttribute("href") },
                        rootScrobbleElement.getElementsByTagName("a")
                       )
                    )[0];
        }

        this.asJSONSerializable = function() {
            return {
                "track_metadata": {
                    "track_name": this.trackName(),
                    "artist_name": this.artistName(),
                    "spotify_id": this.optionalSpotifyID()
                },
                "listened_at": this.scrobbledAt()

            }
        }

        function extractlastFMIDFromLoveButtonURL(loveButtonURL) {
            var parts = loveButtonURL.split("/");
            return parts.slice(0, parts.length-1).join("/");
        }
    }
}());

function encodeScrobbles(root) {
    var scrobbles = root.getElementsByClassName("js-link-block");
    var parsedScrobbles = map(function(rawScrobble) {
        var scrobble = new Scrobble(rawScrobble);
        return scrobble.asJSONSerializable();
    }, scrobbles);

    var structure = {
        "listen_type" : "import",
        "payload"     : parsedScrobbles
    }

    return structure;
}

function getLastFMPage(page, callback) {
    var xhr = new XMLHttpRequest();
    xhr.open("GET", encodeURI("http://www.last.fm/user/zebrasohmygod/library?page=" + page + "&_pjax=%23content"));
    xhr.onload = function(content) {
        callback(xhr.response);
    };
    xhr.send();
}

var page = 1;
var numberOfPages = parseInt(document.getElementsByClassName("pages")[0].innerHTML.trim().split(" ")[3]);

function reportScrobbles(struct) {
    //must have a trailing slash
    var reportingURL = "<%= ENV.fetch("BASE_URL") %>/listens/<%= user_id %>";

    var xhr = new XMLHttpRequest();
    xhr.open("POST", encodeURI(reportingURL));
    xhr.setRequestHeader("Content-Type", "application/json;charset=UTF-8");
    xhr.onload = function(content) {
        console.log("successfully reported page");
    };
    xhr.send(JSON.stringify(struct));
}

function reportPage(response) {
    var elem = document.createElement("div");
    elem.innerHTML = response;
    var struct = encodeScrobbles(elem);
    reportScrobbles(struct);
}
function reportPageAndGetNext(response) {
    reportPage(response);
    page += 1;

    if (page < numberOfPages) {
        setTimeout(function() { getLastFMPage(page, reportPageAndGetNext) }, 900 + Math.random()*100);
    }
}

getLastFMPage(page, reportPageAndGetNext);
